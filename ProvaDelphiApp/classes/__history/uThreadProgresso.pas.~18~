unit uThreadProgresso;

interface

uses
  System.Classes, Vcl.ComCtrls;

type
  TOnProgress = procedure (const AContador, AIDThread: Integer) of object;

  TThreadProgresso = class(TThread)
  private
    FContador: Integer;
    FOnProgress: TOnProgress;
    FIDThread: integer;
    procedure CallOnProgress;
  protected
    procedure DoProgress;
  public
    procedure Execute; override;
    property IDThread: integer read FIDThread write FIDThread;
    property OnProgress: TOnProgress read FOnProgress write FOnProgress;
    property Contador: Integer read FContador;
  end;

implementation

{ TThreadProgresso }

procedure TThreadProgresso.CallOnProgress;
begin
  if Assigned(FOnProgress) then
  begin
    FOnProgress(FContador, FIDThread);
  end;
end;

procedure TThreadProgresso.DoProgress;
begin
  if Assigned(FOnProgress) then
  begin
    Synchronize(CallOnProgress);
  end;
end;

procedure TThreadProgresso.Execute;
begin
  inherited;
  Sleep(100);
end;

end.
